{"version":3,"file":"xpathUtil.test.js","sourceRoot":"","sources":["xpathUtil.test.ts"],"names":[],"mappings":";;AAAA,mCAA0C;AAC1C,gDAAuE;AAEvE,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,wEAAwE,EAAE,GAAG,EAAE;QAChF,MAAM,QAAQ,GAAG;YACf,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE;YAC5B,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,EAAE;YAC/B,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE;YAC/C,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,EAAE;YAC/B,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,cAAc,EAAE;SACzD,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,IAAI,CAAC,EACtC,mEAAmE,CACpE,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,OAAO,CAAC,EACzC,uDAAuD,CACxD,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,SAAS,CAAC,EAC3C,oDAAoD,CACrD,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,SAAS,CAAC,EAC3C,uFAAuF,CACxF,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,YAAY,CAAC,EAC9C,uFAAuF,CACxF,CAAC;QACF,eAAM,CAAC,KAAK,CACV,IAAA,sBAAU,EAAC,QAAQ,EAAE,uBAAW,CAAC,UAAU,CAAC,EAC5C,gFAAgF,CACjF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,MAAM,GAAG,IAAA,sBAAU,EACvB,oEAAoE,CACrE,CAAC;QACF,eAAM,CAAC,eAAe,CAAC,MAAM,EAAE;YAC7B,EAAE,GAAG,EAAE,SAAS,EAAE;YAClB,EAAE,GAAG,EAAE,YAAY,EAAE;YACrB,EAAE,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,EAAE;YAC9B,EAAE,GAAG,EAAE,YAAY,EAAE;YACrB,EAAE,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE;SAClC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { strict as assert } from 'assert';\nimport { buildXPath, XPathFormat, parseXPath } from '../src/xpathUtil';\n\ndescribe('XPath Utilities', () => {\n  it('builds full, compact, names only, named and breadcrumb paths correctly', () => {\n    const segments = [\n      { tag: 'Project', index: 1 },\n      { tag: 'EntityDefs', index: 1 },\n      { tag: 'EntityDef', index: 1, nameAttr: 'Doc' },\n      { tag: 'Attributes', index: 1 },\n      { tag: 'Attribute', index: 2, nameAttr: 'TurnoverName' }\n    ];\n    assert.equal(\n      buildXPath(segments, XPathFormat.Full),\n      '/Project[1]/EntityDefs[1]/EntityDef[1]/Attributes[1]/Attribute[2]'\n    );\n    assert.equal(\n      buildXPath(segments, XPathFormat.Compact),\n      '/Project/EntityDefs/EntityDef/Attributes/Attribute[2]'\n    );\n    assert.equal(\n      buildXPath(segments, XPathFormat.NamesOnly),\n      '/Project/EntityDefs/EntityDef/Attributes/Attribute'\n    );\n    assert.equal(\n      buildXPath(segments, XPathFormat.NamedFull),\n      \"/Project/EntityDefs/EntityDef[@name='Doc']/Attributes/Attribute[@name='TurnoverName']\"\n    );\n    assert.equal(\n      buildXPath(segments, XPathFormat.NamedCompact),\n      \"/Project/EntityDefs/EntityDef[@name='Doc']/Attributes/Attribute[@name='TurnoverName']\"\n    );\n    assert.equal(\n      buildXPath(segments, XPathFormat.Breadcrumb),\n      'Project > EntityDefs > EntityDef (Doc) > Attributes > Attribute (TurnoverName)'\n    );\n  });\n\n  it('parses XPath strings into tag/index/name descriptors', () => {\n    const parsed = parseXPath(\n      \"/Project/EntityDefs/EntityDef[2]/Attributes/Attribute[@name='Foo']\"\n    );\n    assert.deepStrictEqual(parsed, [\n      { tag: 'Project' },\n      { tag: 'EntityDefs' },\n      { tag: 'EntityDef', index: 2 },\n      { tag: 'Attributes' },\n      { tag: 'Attribute', name: 'Foo' }\n    ]);\n  });\n});"]}