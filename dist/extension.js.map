{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from 'vscode';\nimport { minimatch } from 'minimatch';\nimport {\n  XPathFormat,\n  computeXPathForPosition,\n  parseXPath,\n  SkipRule\n} from './xpathUtil';\nimport { findElementByXPath } from './xmlParser';\n\n/**\n * This method is called when your extension is activated.  VS Code will\n * activate the extension the first time a file of the configured languages is\n * opened or any of the contributed commands is invoked.  We register all\n * commands here and perform runtime checks for document symbols when needed.\n */\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n  console.log('XPath Copier: Extension activating');\n  // Extension now activates and registers commands.\n  // Runtime checks for document symbols will be done when commands are executed.\n\n  /**\n   * Helper to register a simple copy command bound to a specific format.\n   */\n  function registerCopyCommand(cmd: string, fmt: XPathFormat) {\n    console.log(`XPath Copier: Registering command ${cmd}`);\n    const disposable = vscode.commands.registerCommand(cmd, async () => {\n      console.log(`XPath Copier: Command ${cmd} executed`);\n      await copyXPaths(fmt);\n    });\n    context.subscriptions.push(disposable);\n  }\n\n  // Register copy commands for each builtâ€‘in format\n  registerCopyCommand('xpathCopier.copyXPathFull', XPathFormat.Full);\n  registerCopyCommand('xpathCopier.copyXPathCompact', XPathFormat.Compact);\n  registerCopyCommand('xpathCopier.copyXPathNamesOnly', XPathFormat.NamesOnly);\n  registerCopyCommand('xpathCopier.copyXPathNamedFull', XPathFormat.NamedFull);\n  registerCopyCommand('xpathCopier.copyXPathNamedCompact', XPathFormat.NamedCompact);\n  registerCopyCommand('xpathCopier.copyXPathBreadcrumb', XPathFormat.Breadcrumb);\n\n  // Unified QuickPick command\n  const quickPickDisposable = vscode.commands.registerCommand(\n    'xpathCopier.copyXPathQuickPick',\n    async () => {\n      await showQuickPick();\n    }\n  );\n  context.subscriptions.push(quickPickDisposable);\n\n  // Reverse (paste & go) command\n  const reverseDisposable = vscode.commands.registerCommand(\n    'xpathCopier.copyXPathReverse',\n    async () => {\n      await pasteAndGo();\n    }\n  );\n  context.subscriptions.push(reverseDisposable);\n  \n  console.log('XPath Copier: Extension activation completed');\n}\n\n/**\n * Filter skip rules to only those matching the given file path.\n * Uses minimatch for glob pattern matching.\n */\nfunction matchSkipRules(filePath: string, rules: SkipRule[]): SkipRule[] {\n  return rules.filter(rule => {\n    try {\n      return minimatch(filePath, rule.filePattern);\n    } catch (error) {\n      console.error(`XPath Copier: Invalid file pattern '${rule.filePattern}':`, error);\n      return false;\n    }\n  });\n}\n\n/**\n * Copy XPaths for the current selections using the given format.  Handles\n * multiâ€‘cursor selection, clipboard writing and optionally shows a peek\n * window to provide context.\n */\nasync function copyXPaths(format: XPathFormat): Promise<void> {\n  console.log(`XPath Copier: copyXPaths called with format: ${format}`);\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    console.log('XPath Copier: No active editor');\n    vscode.window.showWarningMessage('No active editor');\n    return;\n  }\n  const document = editor.document;\n  const selections = editor.selections;\n  const config = vscode.workspace.getConfiguration('xpathCopier');\n  const multicursorFormat: string = config.get('multicursorFormat', 'lines');\n  const customTemplates: string[] = config.get('customFormatTemplates', []);\n  const enableFormats: { [key: string]: boolean } = config.get('enableFormats', {} as any);\n\n  // Read element skipping configuration\n  const enableSkipping: boolean = config.get('enableElementSkipping', false);\n  const allSkipRules: SkipRule[] = config.get('skipRules', []);\n\n  // Match skip rules against current document path\n  const applicableSkipRules = enableSkipping\n    ? matchSkipRules(document.uri.fsPath, allSkipRules)\n    : [];\n\n  // If the requested format is disabled skip the operation\n  if (format !== XPathFormat.Custom && enableFormats && enableFormats[format] === false) {\n    vscode.window.showWarningMessage(`The ${format} format is disabled in settings.`);\n    return;\n  }\n  console.log(`XPath Copier: Document language: ${document.languageId}, selections: ${selections.length}`);\n  console.log(`XPath Copier: Element skipping enabled: ${enableSkipping}, applicable rules: ${applicableSkipRules.length}`);\n\n  const results: string[] = [];\n  for (const sel of selections) {\n    const pos = sel.active;\n    console.log(`XPath Copier: Computing XPath for position: line ${pos.line}, char ${pos.character}`);\n    const xpath = await computeXPathForPosition(document, pos, format, {\n      customTemplates,\n      skipRules: applicableSkipRules,\n      enableSkipping\n    });\n    console.log(`XPath Copier: Computed XPath: ${xpath}`);\n    if (xpath) {\n      results.push(xpath);\n    }\n  }\n  console.log(`XPath Copier: Results: ${results.length} XPaths computed`);\n  if (results.length === 0) {\n    vscode.window.showWarningMessage('Unable to compute XPath for the current selection.');\n    return;\n  }\n  let output: string;\n  if (results.length === 1) {\n    output = results[0];\n  } else {\n    if (multicursorFormat === 'json') {\n      output = JSON.stringify(results, null, 2);\n    } else {\n      output = results.join('\\n');\n    }\n  }\n  await vscode.env.clipboard.writeText(output);\n  console.log(`XPath Copier: Successfully copied to clipboard: ${output}`);\n  vscode.window.setStatusBarMessage(`âœ“ Copied XPath${results.length > 1 ? 's' : ''} to clipboard`, 3000);\n}\n\n/**\n * Present a QuickPick listing all enabled formats and any custom templates.\n * The user's selection will determine which XPath string is generated.\n */\nasync function showQuickPick(): Promise<void> {\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return;\n  }\n  const config = vscode.workspace.getConfiguration('xpathCopier');\n  const enableFormats: { [key: string]: boolean } = config.get('enableFormats', {} as any);\n  const customTemplates: string[] = config.get('customFormatTemplates', []);\n  // Build items for builtâ€‘in formats\n  const items: Array<vscode.QuickPickItem & { format?: XPathFormat; template?: string }> = [];\n  const pushIfEnabled = (fmt: XPathFormat, label: string) => {\n    if (!enableFormats || enableFormats[fmt] !== false) {\n      items.push({ label, format: fmt });\n    }\n  };\n  pushIfEnabled(XPathFormat.Full, 'Full');\n  pushIfEnabled(XPathFormat.Compact, 'Compact');\n  pushIfEnabled(XPathFormat.NamesOnly, 'Names Only');\n  pushIfEnabled(XPathFormat.NamedFull, 'Named Full');\n  pushIfEnabled(XPathFormat.NamedCompact, 'Named Compact');\n  pushIfEnabled(XPathFormat.Breadcrumb, 'Breadcrumb');\n  // Add custom templates as additional items\n  if (customTemplates && customTemplates.length > 0) {\n    customTemplates.forEach((tmpl, index) => {\n      const label = `Custom ${index + 1}`;\n      const description = tmpl;\n      items.push({ label, description, format: XPathFormat.Custom, template: tmpl });\n    });\n  }\n  const pick = await vscode.window.showQuickPick(items, {\n    placeHolder: 'Select XPath format',\n    canPickMany: false\n  });\n  if (!pick) {\n    return;\n  }\n  // Determine chosen format and optionally override custom template order\n  if (pick.format === XPathFormat.Custom && pick.template) {\n    // Temporarily put chosen template at front of array so computeXPath uses it\n    const allTemplates: string[] = [pick.template];\n    await copyXPathsCustom(allTemplates);\n  } else if (pick.format) {\n    await copyXPaths(pick.format);\n  }\n}\n\n/**\n * Copy XPaths using an explicit list of custom templates.  This helper is\n * invoked from the QuickPick when a custom template entry is selected.\n */\nasync function copyXPathsCustom(customTemplates: string[]): Promise<void> {\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return;\n  }\n  const document = editor.document;\n  const selections = editor.selections;\n  const results: string[] = [];\n  for (const sel of selections) {\n    const pos = sel.active;\n    const xpath = await computeXPathForPosition(document, pos, XPathFormat.Custom, { customTemplates });\n    if (xpath) {\n      results.push(xpath);\n    }\n  }\n  if (results.length === 0) {\n    vscode.window.showWarningMessage('Unable to compute custom XPath for the current selection.');\n    return;\n  }\n  const config = vscode.workspace.getConfiguration('xpathCopier');\n  const multicursorFormat: string = config.get('multicursorFormat', 'lines');\n  let output: string;\n  if (results.length === 1) {\n    output = results[0];\n  } else {\n    output = multicursorFormat === 'json' ? JSON.stringify(results, null, 2) : results.join('\\n');\n  }\n  await vscode.env.clipboard.writeText(output);\n  console.log(`XPath Copier: Successfully copied to clipboard: ${output}`);\n  vscode.window.setStatusBarMessage(`âœ“ Copied XPath${results.length > 1 ? 's' : ''} to clipboard`, 3000);\n}\n\n/**\n * Reverse lookup: prompt the user for an XPath and, if it matches an\n * element in the current document, jump to that location.  If no\n * matching element is found, display an informational message.\n */\nasync function pasteAndGo(): Promise<void> {\n  const editor = vscode.window.activeTextEditor;\n  if (!editor) {\n    return;\n  }\n  const document = editor.document;\n  const input = await vscode.window.showInputBox({\n    prompt: 'Enter an XPath to navigate to',\n    placeHolder: '/Project/EntityDefs/EntityDef[1]/Attributes/Attribute[2]'\n  });\n  if (!input) {\n    return;\n  }\n  const parsed = parseXPath(input);\n  if (parsed.length === 0) {\n    vscode.window.showWarningMessage('Invalid or empty XPath.');\n    return;\n  }\n\n  const position = findElementByXPath(document, parsed);\n  if (!position) {\n    vscode.window.showInformationMessage('No element matching the specified XPath was found.');\n    return;\n  }\n\n  const targetRange = new vscode.Range(position, position);\n  editor.revealRange(targetRange, vscode.TextEditorRevealType.InCenter);\n  editor.selection = new vscode.Selection(position, position);\n  vscode.window.setStatusBarMessage('Navigated to element.', 2000);\n}\n\n// The deactivate function is kept for completeness.  It is not strictly\n// necessary because VS Code disposes of subscriptions automatically when\n// the extension is unloaded.\nexport function deactivate() {}"]}